@file:Suppress("UNUSED_PARAMETER", "ConvertCallChainIntoSequence")

package lesson6.task1

import java.lang.IllegalArgumentException

/**
 * Пример
 *
 * Время представлено строкой вида "11:34:45", содержащей часы, минуты и секунды, разделённые двоеточием.
 * Разобрать эту строку и рассчитать количество секунд, прошедшее с начала дня.
 */
fun timeStrToSeconds(str: String): Int {
    val parts = str.split(":")
    var result = 0
    for (part in parts) {
        val number = part.toInt()
        result = result * 60 + number
    }
    return result
}

/**
 * Пример
 *
 * Дано число n от 0 до 99.
 * Вернуть его же в виде двухсимвольной строки, от "00" до "99"
 */
fun twoDigitStr(n: Int) = if (n in 0..9) "0$n" else "$n"

/**
 * Пример
 *
 * Дано seconds -- время в секундах, прошедшее с начала дня.
 * Вернуть текущее время в виде строки в формате "ЧЧ:ММ:СС".
 */
fun timeSecondsToStr(seconds: Int): String {
    val hour = seconds / 3600
    val minute = (seconds % 3600) / 60
    val second = seconds % 60
    return String.format("%02d:%02d:%02d", hour, minute, second)
}

/**
 * Пример: консольный ввод
 */
fun main() {
    println("Введите время в формате ЧЧ:ММ:СС")
    val line = readLine()
    if (line != null) {
        val seconds = timeStrToSeconds(line)
        if (seconds == -1) {
            println("Введённая строка $line не соответствует формату ЧЧ:ММ:СС")
        } else {
            println("Прошло секунд с начала суток: $seconds")
        }
    } else {
        println("Достигнут <конец файла> в процессе чтения строки. Программа прервана")
    }
}


/**
 * Средняя
 *
 * Дата представлена строкой вида "15 июля 2016".
 * Перевести её в цифровой формат "15.07.2016".
 * День и месяц всегда представлять двумя цифрами, например: 03.04.2011.
 * При неверном формате входной строки вернуть пустую строку.
 *
 * Обратите внимание: некорректная с точки зрения календаря дата (например, 30.02.2009) считается неверными
 * входными данными.
 */
fun dateStrToDigit(str: String): String {
    val s = str.split(" ").toMutableList()
    if (s.size != 3) return ""
    when {
        s[1] == "января" && s[0].toInt() in 1..31 -> s[1] = "01"
        s[1] == "февраля" && if (s[2].toInt() % 4 == 0 || s[2].toInt() == 400 && s[2].toInt() % 100 != 0)
            s[0].toInt() in 1..29
        else s[0].toInt() in 1..28 -> s[1] = "02"
        s[1] == "марта" && s[0].toInt() in 1..31 -> s[1] = "03"
        s[1] == "апреля" && s[0].toInt() in 1..30 -> s[1] = "04"
        s[1] == "мая" && s[0].toInt() in 1..31 -> s[1] = "05"
        s[1] == "июня" && s[0].toInt() in 1..30 -> s[1] = "06"
        s[1] == "июля" && s[0].toInt() in 1..31 -> s[1] = "07"
        s[1] == "августа" && s[0].toInt() in 1..31 -> s[1] = "08"
        s[1] == "сентября" && s[0].toInt() in 1..30 -> s[1] = "09"
        s[1] == "октября" && s[0].toInt() in 1..31 -> s[1] = "10"
        s[1] == "ноября" && s[0].toInt() in 1..30 -> s[1] = "11"
        s[1] == "декабря" && s[0].toInt() in 1..31 -> s[1] = "12"
        else -> return ""
    }
    return String.format("%02d.%02d.%d", s[0].toInt(), s[1].toInt(), s[2].toInt())
}

/**
 * Средняя
 *
 * Дата представлена строкой вида "15.07.2016".
 * Перевести её в строковый формат вида "15 июля 2016".
 * При неверном формате входной строки вернуть пустую строку
 *
 * Обратите внимание: некорректная с точки зрения календаря дата (например, 30 февраля 2009) считается неверными
 * входными данными.
 */
fun dateDigitToStr(digital: String): String {

    val s = digital.split(".").toMutableList()
    if (s.size != 3) return ""
    when {
        s[1] == "01" && s[0].toInt() in 1..31 -> s[1] = "января"
        s[1] == "02" && if (s[2].toInt() % 4 == 0 || s[2].toInt() == 400 && s[2].toInt() % 100 != 0)
            s[0].toInt() in 1..29
        else s[0].toInt() in 1..28 -> s[1] = "февраля"
        s[1] == "03" && s[0].toInt() in 1..31 -> s[1] = "марта"
        s[1] == "04" && s[0].toInt() in 1..30 -> s[1] = "апреля"
        s[1] == "05" && s[0].toInt() in 1..31 -> s[1] = "мая"
        s[1] == "06" && s[0].toInt() in 1..30 -> s[1] = "июня"
        s[1] == "07" && s[0].toInt() in 1..31 -> s[1] = "июля"
        s[1] == "08" && s[0].toInt() in 1..31 -> s[1] = "августа"
        s[1] == "09" && s[0].toInt() in 1..30 -> s[1] = "сентября"
        s[1] == "10" && s[0].toInt() in 1..31 -> s[1] = "октября"
        s[1] == "11" && s[0].toInt() in 1..30 -> s[1] = "ноября"
        s[1] == "12" && s[0].toInt() in 1..31 -> s[1] = "декабря"
        else -> return ""
    }
    return String.format("%d %s %d", s[0].toInt(), s[1], s[2].toInt())
}

/**
 * Средняя
 *
 * Номер телефона задан строкой вида "+7 (921) 123-45-67".
 * Префикс (+7) может отсутствовать, код города (в скобках) также может отсутствовать.
 * Может присутствовать неограниченное количество пробелов и чёрточек,
 * например, номер 12 --  34- 5 -- 67 -89 тоже следует считать легальным.
 * Перевести номер в формат без скобок, пробелов и чёрточек (но с +), например,
 * "+79211234567" или "123456789" для приведённых примеров.
 * Все символы в номере, кроме цифр, пробелов и +-(), считать недопустимыми.
 * При неверном формате вернуть пустую строку.
 *
 * PS: Дополнительные примеры работы функции можно посмотреть в соответствующих тестах.
 */
fun flattenPhoneNumber(phone: String): String {
    var l = ""
    for (i in 0 until phone.length)
        if (i == 0 && phone[i] == '+')
            l += phone[i]
        else if (phone[i] == '(' && phone[i + 1] == ')') return ""
        else if (phone[i].toInt() in 48..57) l += phone[i]
        else if (phone[i] == '(' || phone[i] == ')' || phone[i] == '-' || phone[i] == ' ')
        else return ""
    return l
}

/**
 * Средняя
 *
 * Результаты спортсмена на соревнованиях в прыжках в длину представлены строкой вида
 * "706 - % 717 % 703".
 * В строке могут присутствовать числа, черточки - и знаки процента %, разделённые пробелами;
 * число соответствует удачному прыжку, - пропущенной попытке, % заступу.
 * Прочитать строку и вернуть максимальное присутствующее в ней число (717 в примере).
 * При нарушении формата входной строки или при отсутствии в ней чисел, вернуть -1.
 */
fun bestLongJump(jumps: String): Int {
    val j = jumps.split('%', '-', ' ').toMutableList()
    var i = 0
    while (i < j.size) {
        if (i == j.size) break
        if (j[i] == " " || j[i] == "-" || j[i] == "%" || j[i] == "") {
            j.removeAt(i)
            i--
        } else if (j[i].toIntOrNull() == null) return -1
        i++
    }
    if (j.size == 0) return -1
    i = j[0].toInt()
    for (a in j)
        if (a.toInt() > i) i = a.toInt()
    return i
}

/**
 * Сложная
 *
 * Результаты спортсмена на соревнованиях в прыжках в высоту представлены строкой вида
 * "220 + 224 %+ 228 %- 230 + 232 %%- 234 %".
 * Здесь + соответствует удачной попытке, % неудачной, - пропущенной.
 * Высота и соответствующие ей попытки разделяются пробелом.
 * Прочитать строку и вернуть максимальную взятую высоту (230 в примере).
 * При нарушении формата входной строки, а также в случае отсутствия удачных попыток,
 * вернуть -1.
 */
fun bestHighJump(jumps: String): Int {
    val j = jumps.split('%', '-', ' ').toMutableList()
    var i = 0
    while (i < j.size) {
        if (i == j.size) break
        if (j[i] == " " || j[i] == "-" || j[i] == "%" || j[i] == "" || j[i] == "+" || if (i != j.size - 1) j[i + 1] != "+" else j[i] == "") {
            j.removeAt(i)
            i--
        } else if (j[i].toIntOrNull() == null) return -1
        i++
    }
    if (j.size == 0) return -1
    i = j[0].toInt()
    for (a in j)
        if (a.toInt() > i) i = a.toInt()
    return i
}

/**
 * Сложная
 *
 * В строке представлено выражение вида "2 + 31 - 40 + 13",
 * использующее целые положительные числа, плюсы и минусы, разделённые пробелами.
 * Наличие двух знаков подряд "13 + + 10" или двух чисел подряд "1 2" не допускается.
 * Вернуть значение выражения (6 для примера).
 * Про нарушении формата входной строки бросить исключение IllegalArgumentException
 */
fun plusMinus(expression: String): Int {
    var e = expression
    val w = expression.split(" ").toMutableList()
    e = e.replace(" ", "")
    for (a in 0 until e.length)
        if (e[a].toInt() in 43..45 && e[a + 1].toInt() in 43..45 || e[0].toInt() in 43..45)
            throw IllegalArgumentException()
    for (a in 0..w.size - 2)
        if (w[a].toIntOrNull() != null && w[a + 1].toIntOrNull() != null || (w[a].toIntOrNull() == null && w[a] != "+" && w[a] != "-"))
            throw IllegalArgumentException()
    val i = 1
    while (i <= w.size - 2) {
        if (w[i] == "+") {
            val k = w[i - 1].toInt() + w[i + 1].toInt()
            w[i] = k.toString()
            w.removeAt(i + 1)
            w.removeAt(i - 1)
        } else if (w[i] == "-") {
            val k = w[i - 1].toInt() - w[i + 1].toInt()
            w[i] = k.toString()
            w.removeAt(i + 1)
            w.removeAt(i - 1)
        }
    }
    return w[0].toInt()
}

/**
 * Сложная
 *
 * Строка состоит из набора слов, отделённых друг от друга одним пробелом.
 * Определить, имеются ли в строке повторяющиеся слова, идущие друг за другом.
 * Слова, отличающиеся только регистром, считать совпадающими.
 * Вернуть индекс начала первого повторяющегося слова, или -1, если повторов нет.
 * Пример: "Он пошёл в в школу" => результат 9 (индекс первого 'в')
 */
fun firstDuplicateIndex(str: String): Int {
    val s = str.split(" ").toMutableList()
    var g = 0
    for (a in 0..s.size - 2)
        if (s[a].toUpperCase() == s[a + 1].toUpperCase()) g = a
    var k = ""
    var e = 0
    for (a in 0 until str.length) {
        k += str[a]
        if (str[a] == ' ') {
            if (e == g) return a - k.length + 1
            k = ""
            e++
        }
    }
    return -1
}

/**
 * Сложная
 *
 * Строка содержит названия товаров и цены на них в формате вида
 * "Хлеб 39.9; Молоко 62; Курица 184.0; Конфеты 89.9".
 * То есть, название товара отделено от цены пробелом,
 * а цена отделена от названия следующего товара точкой с запятой и пробелом.
 * Вернуть название самого дорогого товара в списке (в примере это Курица),
 * или пустую строку при нарушении формата строки.
 * Все цены должны быть больше либо равны нуля.
 */
fun mostExpensive(description: String): String {
    if (description == "") return ""
    val d = description.split(" ", ";")
    val q = mutableListOf<Double>()
    for (i in 0 until d.size) {
        if (d[i].isNotEmpty())
            if (d[i][0].toInt() in 49..57)
                q.add(d[i].toDouble())
    }
    var k = q[0]
    for (i in q)
        if (i > k) k = i
    for (i in 0 until d.size)
        if (k.toString() == d[i]) return d[i - 1]
    return k.toString()
}

/**
 * Сложная
 *
 * Перевести число roman, заданное в римской системе счисления,
 * в десятичную систему и вернуть как результат.
 * Римские цифры: 1 = I, 4 = IV, 5 = V, 9 = IX, 10 = X, 40 = XL, 50 = L,
 * 90 = XC, 100 = C, 400 = CD, 500 = D, 900 = CM, 1000 = M.
 * Например: XXIII = 23, XLIV = 44, C = 100
 *
 * Вернуть -1, если roman не является корректным римским числом
 */
fun fromRoman(roman: String): Int {
    val x = roman.replace("CM", "DCD")
        .replace("M", "DD")
        .replace("CD", "CCCC")
        .replace("D", "CCCCC")
        .replace("XC", "LXL")
        .replace("C", "LL")
        .replace("XL", "XXXX")
        .replace("L", "XXXXX")
        .replace("IX", "VIV")
        .replace("X", "VV")
        .replace("IV", "IIII")
        .replace("V", "IIIII")
    for (i in x)
        if (i != 'I') return -1
    return x.length
}

/**
 * Очень сложная
 *
 * Имеется специальное устройство, представляющее собой
 * конвейер из cells ячеек (нумеруются от 0 до cells - 1 слева направо) и датчик, двигающийся над этим конвейером.
 * Строка commands содержит последовательность команд, выполняемых данным устройством, например +>+>+>+>+
 * Каждая команда кодируется одним специальным символом:
 *	> - сдвиг датчика вправо на 1 ячейку;
 *  < - сдвиг датчика влево на 1 ячейку;
 *	+ - увеличение значения в ячейке под датчиком на 1 ед.;
 *	- - уменьшение значения в ячейке под датчиком на 1 ед.;
 *	[ - если значение под датчиком равно 0, в качестве следующей команды следует воспринимать
 *  	не следующую по порядку, а идущую за соответствующей следующей командой ']' (с учётом вложенности);
 *	] - если значение под датчиком не равно 0, в качестве следующей команды следует воспринимать
 *  	не следующую по порядку, а идущую за соответствующей предыдущей командой '[' (с учётом вложенности);
 *      (комбинация [] имитирует цикл)
 *  пробел - пустая команда
 *
 * Изначально все ячейки заполнены значением 0 и датчик стоит на ячейке с номером N/2 (округлять вниз)
 *
 * После выполнения limit команд или всех команд из commands следует прекратить выполнение последовательности команд.
 * Учитываются все команды, в том числе несостоявшиеся переходы ("[" при значении под датчиком не равном 0 и "]" при
 * значении под датчиком равном 0) и пробелы.
 *
 * Вернуть список размера cells, содержащий элементы ячеек устройства после завершения выполнения последовательности.
 * Например, для 10 ячеек и командной строки +>+>+>+>+ результат должен быть 0,0,0,0,0,1,1,1,1,1
 *
 * Все прочие символы следует считать ошибочными и формировать исключение IllegalArgumentException.
 * То же исключение формируется, если у символов [ ] не оказывается пары.
 * Выход за границу конвейера также следует считать ошибкой и формировать исключение IllegalStateException.
 * Считать, что ошибочные символы и непарные скобки являются более приоритетной ошибкой чем выход за границу ленты,
 * то есть если в программе присутствует некорректный символ или непарная скобка, то должно быть выброшено
 * IllegalArgumentException.
 * IllegalArgumentException должен бросаться даже если ошибочная команда не была достигнута в ходе выполнения.
 *
 */
fun computeDeviceCells(cells: Int, commands: String, limit: Int): List<Int> = TODO()
